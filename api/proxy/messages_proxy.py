import os

from flask import Request, Response, jsonify

from api.proxy.proxy_interface import ProxyInterface
from api.messages.messages_responses_generator import MessagesResponsesGenerator


class MessagesProxy(ProxyInterface):
    """Implementation of the interface that is used as a generic entry point to the messages service."""

    def __init__(self, messages_responses_generator: MessagesResponsesGenerator):
        """
        Constructor.

        :param messages_responses_generator: The messages responses generator service to which successful
        requests are redirected.
        """
        self._messages_responses_generator: MessagesResponsesGenerator = messages_responses_generator

    @staticmethod
    def _validate_data(user_message_json_data) -> [bool, dict]:
        """
        Validate the data sent in a user message.

        :param user_message_json_data: The JSON object sent in a user message.
        :return: A boolean value that indicates if the JSON object is valid and
        a dictionary with the HTML of an identify error.
        """
        expected_key: str = 'user_message'
        max_value_length: int = int(os.getenv('MAX_USER_MESSAGE_LENGTH'))

        # Check if a valid JSON was sent
        if not user_message_json_data or expected_key not in user_message_json_data or len(user_message_json_data) > 1:
            return [False, {'error': 'Los tipos de datos enviados son invÃ¡lidos.'}]

        # Get the value of the key
        value = user_message_json_data[expected_key]

        # Check the maximum length of the value
        if len(str(value)) > max_value_length:
            return [
                False,
                {'error': f'La longitud del mensaje excede el lÃ­mite permitido ({max_value_length} caracteres).'}
            ]

        return [True, {}]

    def handle_request(self, user_request: Request) -> Response:
        """
        Validate the structure of a user request and redirects the request to the messages service.

        :param user_request: A message request submitted by a user.
        :return: The response generated by the messages service.
        """
        user_message_json_data = user_request.get_json()
        validation_result = self._validate_data(user_message_json_data)

        if not validation_result[0]:
            return jsonify(validation_result[1])

        return self._messages_responses_generator.handle_request(user_request)
